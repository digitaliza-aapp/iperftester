#!/bin/bash

############################################################################################
#                                                                                          #
# utilidades_lib   : Libreria de utilidades para iperftester                               #
#                                                                                          #
#------------------------------------------------------------------------------------------#
#                                                                                          #
# Autor         : Felipe Muñoz Brieva - fmbrieva@gmail.com                                 #
#                                                                                          #
#------------------------------------------------------------------------------------------#
#                                                                                          #
# Modificaciones:                                                                          #
#                                                                                          #
# 03/02/2018      Versión inicial                                                          #
#   Felipe                                                                                 #
#                                                                                          #
# 28/02/2018      Añadir textos personalizados por idioma                                  #
#   Felipe                                                                                 #
#                                                                                          #
############################################################################################


### Parametros 
TIEMPO_VISUALIZACION_MENSAJE=2
BOTON_CANCELAR="*BOTON_CANCELAR*"

### Obtener parametros memorizados localmente
function leerValor()
{

  tmp=$(grep $1 $2 | awk '{print $2}')

}

### Mensaje para formatos de datos erroneos
### $1 mensaje de error
function mensajeDatoErroneo(){

  if [ -z "$1" ]; then
      dialog --stdout --backtitle "$PROGRAMA $VERSION"  --infobox "$DIALOG_DATA_ERROR" 0 0 ; sleep $TIEMPO_VISUALIZACION_MENSAJE;
     else
      dialog --stdout --backtitle "$PROGRAMA $VERSION"  --infobox "$1" 0 0 ; sleep $TIEMPO_VISUALIZACION_MENSAJE;

  fi

}

### Validadores ------------------------------------------------------------------------------

### Validar formatos validos de ip y mascaras 999.999.999.999
function validarIp()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

### Validar numeros
function validarNumero()
{
    local  numero=$1
    local  stat=1

    if [[ $numero =~ ^[0-9]{1,5}$ ]]; then
        stat=0
    fi

    return $stat
}

### Validar numeros
function validarAnchoBanda()
{
    local  numero=$1
    local  stat=1

    if [[ $numero =~ ^[0-9]{1,5}[KM]$ ]]; then
        stat=0
    fi

    return $stat
}

### Validar valor boolean s/n
function validarBoolean()
{
    local  booleano=$1
    local  stat=1

    if [[ $booleano =~ ^[sn]$ ]]; then
        stat=0
    fi

    return $stat
}

### Funciones de entrada de datos ------------------------------------------------------------

### Leer valor con formato IP
### S1 titulo
### $2 pregunta
### $3 alto
### $4 ancho
### $5 valor defecto
### $6 Valor puede ser nulo
function leerValorIp()
{

    ### error=0 -> no hay error en el campo
    ### error=1 -> campo erroneo no ha pasao el iltro de validacion 
    error=1

    while [ $error -eq 1 ]; do
       valor=$(dialog --stdout --backtitle "$PROGRAMA $VERSION" --title "$1" --inputbox "$2" "$3" "$4" "$5")
       sel=$?
       case $sel in
         0)
            if [ -z "$valor" ] && [ "$6" == "s" ]; then return; fi;
            if validarIp $valor; then error=0; else mensajeDatoErroneo; fi;;
         1) 
            error=0;
            valor=$BOTON_CANCELAR;;
       esac

    done

}

### Leer valor con formatonumero 
### S1 titulo
### $2 pregunta
### $3 alto
### $4 ancho
### $5 valor defecto
function leerValorNumero()
{

    error=1

    while [ $error -eq 1 ]; do
       valor=$(dialog --stdout --backtitle "$PROGRAMA $VERSION" --title "$1" --inputbox "$2" "$3" "$4" "$5")
       sel=$?
       case $sel in
         0)
            if validarNumero $valor; then error=0; else mensajeDatoErroneo; fi;;
         1) 
            error=0;
            valor=$BOTON_CANCELAR;;
       esac
       
    done
  
}

### Leer valor sin/no (s/n)
### S1 titulo
### $2 pregunta
### $3 alto
### $4 ancho
function leerValorSiNo()
{

    dialog --stdout --backtitle "$PROGRAMA $VERSION" --title "$1"  --yesno "$2" "$3" "$4"

    response=$?
    case $response in
        0) valor=$VALUE_YES;;
        1) valor=$VALUE_NO;;
      255) valor=$VALUE_NO;;
    esac

}

### Leer valor ancho de banda 
### S1 titulo
### $2 pregunta
### $3 alto
### $4 ancho
function leerValorAnchoBanda()
{

    error=1

    while [ $error -eq 1 ]; do
       valor=$(dialog --stdout --title "$1" --inputbox "$2" "$3" "$4" "$5")
       sel=$?
       case $sel in
         0)
            if validarAnchoBanda $valor; then error=0; else mensajeDatoErroneo; fi;;
         1) 
            error=0;
            valor=$BOTON_CANCELAR;;
       esac

    done
  
}

### Leer valor texto 
### S1 titulo
### $2 pregunta
### $3 alto
### $4 ancho
### $5 valor defecto
function leerValorTexto()
{

    valor=$(dialog --stdout --title "$1" --inputbox "$2" "$3" "$4" "$5")
    sel=$?
    case $sel in
      0) ;;
      1)   valor=$BOTON_CANCELAR;;
    esac

}

### Leer valor password 
### S1 titulo
### $2 pregunta
### $3 alto
### $4 ancho
### $5 valor defecto
function leerValorPassword()
{

    valor=$(dialog --stdout --title "$1" --passwordbox "$2" "$3" "$4" "$5")
    sel=$?
    case $sel in
      0) ;;
      1)   valor=$BOTON_CANCELAR;;
    esac

}

### Leer valor password 
### S1 titulo
### $2 pregunta
### $3 alto
### $4 ancho
### $5 valor defecto
function leerValorPassword()
{

    valor=$(dialog --stdout --title "$1" --insecure --passwordbox "$2" "$3" "$4" "$5")
    sel=$?
    case $sel in
      0) ;;
      1)   valor=$BOTON_CANCELAR;;
    esac

}

### Leer version iperf
### return versionIperfActiva
function leerVersionIperf()
{

    version=$(dialog --stdout --backtitle "$MSG_IPERF_VERSION_SELECT_SHORT" --radiolist "$MSG_IPERF_SELECT_VERSION" 10 40 2 1 "$MSG_IPERF3_VERSION" $IPERF_VERSION_3 2 "$MSG_IPERF_VERSION" $IPERF_VERSION_2) 

    case $version in 
       1) iperfVersionActiva="3";;
       2) iperfVersionActiva="2";;
    esac

}

### Varios -----------------------------------------------------------------------------------

### Pausa para debugger
function debugPausa(){

    read -n1 -r -p "$MSG_ENTER_TO_CONTINUE" pausa

}

### Obtener parametros memorizados localmente
function leerValor()
{

  tmp=$(grep $1 $2 | awk '{print $2}')

}

function cerrarSesion()
{

    ttyNumero=$(/usr/bin/w | grep tty | awk '{print $2}')  

    echo $ttyNumero

    echo pkill -9 -t ttyNUmero

    `pkill -9 -t $ttyNumero`

}

function apagarEquipo()
{

    leerValorSiNo "$MSG_PENDRIVE_EXPORT_SHORT" "$MSG_PENDRIVE_EXPORT" 6 50   

    if [ "$valor" == "s" ]; then
      `sudo init 0`
    fi

}
