#!/bin/bash

############################################################################################
#                                                                                          #
# iperftester_lib   : Librería para iperftester                                            #
#                                                                                          #
#------------------------------------------------------------------------------------------#
#                                                                                          #
# Autor         : Felipe Muñoz Brieva - fmbrieva@gmail.com                                 #
#                                                                                          #
#------------------------------------------------------------------------------------------#
#                                                                                          #
# Modificaciones:                                                                          #
#                                                                                          #
# 03/02/2018      Versión inicial                                                          #
#   Felipe                                                                                 #
#                                                                                          #
# 28/02/2018      Añadir textos personalizados por idioma                                  #
#   Felipe                                                                                 #
#                                                                                          #
# 08/03/2018      Permitir cambiar binarios para tests en modo AUTO, TCP y UDP             #
#   Felipe        Añadir Listen Port para pruebas reverse en iperf version 2               #
#                                                                                          #
############################################################################################

### PROGRAMA y VERSION - Son las unicas variables que pueden aparecer en lang/xx
PROGRAMA="Iperftester"
VERSION=v01r03

IPERF3_COMPILE="3.5+"
IPERF_COMPILE="2.0.10"

### Includes
. /opt/iperftester/utilidades_lib
. /opt/iperftester/lang/es

### Parametros iniciales -------------------------------------------------------------------

### Local ----------------------------------------------------------------------------------

### Equipo local
HOST_LOCAL_IP=192.168.1.10
HOST_LOCAL_MASCARA=255.255.255.0
HOST_LOCAL_GATEWAY=192.168.1.1
HOST_LOCAL_DNS=8.8.8.8


### Red
NETWORK_HW=eth0

### Remoto ----------------------------------------------------------------------------------

### Network test
NETWORK_TEST_NAME=
NETWORK_TEST_IP=192.168.2.20
NETWORK_TEST_ANCHO_BANDA=100M

### Comandos --------------------------------------------------------------------------------

### iperf
IPERF_COMANDO="iperf"
IPERF3_COMANDO="iperf3"

IPERF_VERSION_DEFECTO="3"

HOST_REMOTO_IPERF_TCP_PORT=5001
HOST_REMOTO_IPERF_UDP_PORT=5002
HOST_REMOTO_IPERF3_PORT=5201

HOST_LOCAL_IPERF_TCP_PORT=5001
HOST_LOCAL_IPERF_UDP_PORT=5002
HOST_LOCAL_IPERF_LISTEN_PORT=5003
HOST_LOCAL_IPERF3_PORT=5201

### reporte de tiempo e intervalo
IPERF_REPORTE_TIEMPO=30
IPERF_REPORTE_INTERVALO=5

### Parametros ping
PING_COMANDO="ping"
PING_CONTADOR=10

### Parametros traceroute
TRACEROUTE_COMANDO="traceroute"

### Rutas ------------------------------------------------------------------------------------

RUTA_IPERFTESTER=/opt/iperftester
RUTA_RESULTADOS=/resultados
RUTA_TEMPORAL=$RUTA_IPERFTESTER/tmp

### Ficheros ---------------------------------------------------------------------------------

FICHERO_HOST_LOCAL=$RUTA_TEMPORAL/iperftester_host_local
FICHERO_HOST_LOCAL_DNS=$RUTA_TEMPORAL/iperftester_host_local_dns
FICHERO_NETWORK_TEST=$RUTA_TEMPORAL/iperftester_network_test
FICHERO_NETWORK_TEST_ANCHO_BANDA=$RUTA_TEMPORAL/iperftester_network_test_ancho_banda
FICHERO_HOST_REMOTO_PORT=$RUTA_TEMPORAL/iperftester_remoto_port
FICHERO_HOST_LOCAL_PORT=$RUTA_TEMPORAL/iperftester_local_port
FICHERO_IPERF_REPORTE_TIEMPO=$RUTA_TEMPORAL/iperftester_reporte_tiempo
FICHERO_RESULTADOS=$RUTA_TEMPORAL/iperftester_resultados
FICHERO_TEMPORAL=$RUTA_TEMPORAL/iperftester_temporal
FICHERO_COMANDO_SALIDA=$RUTA_TEMPORAL/iperftester_comando_salida

### ------------------------------------------------------------------------------------------

iperfVersionActiva=$IPERF_VERSION_DEFECTO
numeroTest=0
sinoAnadirUltimoLog="$VALUE_NO"

### Evitar problemas con los permisos de los ficheros modificados desde root
### Se ha cambiado a .bash_logout
###`sudo rm $FICHERO_TEMPORAL`
###`sudo chown -R iperf:iperf $RUTA_RESULTADOS`
###`sudo chown -R iperf:iperf $RUTA_TEMPORAL`

### Recuperar parametros de ficheros temporales
function actualizarParametros()
{  

  if [ -f $FICHERO_HOST_LOCAL ];
   then

     leerValor hostLocalIp $FICHERO_HOST_LOCAL; if [ -n $tmp ]; then hostLocalIp=$tmp; fi
     leerValor hostLocalMascara $FICHERO_HOST_LOCAL; if [ -n $tmp ]; then hostLocalMascara=$tmp; fi
     leerValor hostLocalGateway $FICHERO_HOST_LOCAL; if [ -n $tmp ]; then hostLocalGateway=$tmp; fi

   else 

     hostLocalIp=$HOST_LOCAL_IP
     hostLocalMascara=$HOST_LOCAL_MASCARA
     hostLocalGateway=$HOST_LOCAL_GATEWAY

     echo "hostLocalIp $hostLocalIp"                                            > $FICHERO_HOST_LOCAL
     echo "hostLocalMascara $hostLocalMascara"                                 >> $FICHERO_HOST_LOCAL
     echo "hostLocalGateway $hostLocalGateway"                                 >> $FICHERO_HOST_LOCAL

  fi

  if [ -f $FICHERO_HOST_LOCAL_DNS ];
   then

     leerValor hostLocalDns $FICHERO_HOST_LOCAL_DNS; if [ -n $tmp ]; then hostLocalDns=$tmp; fi

   else 

     hostLocalDns=$HOST_LOCAL_DNS

     echo "hostLocalDns $hostLocalDns"                                 > $FICHERO_HOST_LOCAL_DNS

  fi

  if [ -f $FICHERO_NETWORK_TEST ];
   then

     leerValor networkTestName $FICHERO_NETWORK_TEST; if [ -n $tmp ]; then networkTestName=$tmp; fi
     leerValor networkTestIp $FICHERO_NETWORK_TEST; if [ -n $tmp ]; then networkTestIp=$tmp; fi

   else 

     networkTestName=$NETWORK_TEST_NAME
     networkTestIp=$NETWORK_TEST_IP

     echo "networkTestIp $networkTestIp" > $FICHERO_NETWORK_TEST
     echo "networkTestName $networkTestName" >> $FICHERO_NETWORK_TEST

  fi

  if [ -f $FICHERO_NETWORK_TEST_ANCHO_BANDA ];
   then

     leerValor networkTestAnchoBanda $FICHERO_NETWORK_TEST_ANCHO_BANDA; if [ -n $tmp ]; then networkTestAnchoBanda=$tmp; fi

   else 

     networkTestAnchoBanda=$NETWORK_TEST_ANCHO_BANDA

     echo "networkTestAnchoBanda $networkTestAnchoBanda" >> $FICHERO_NETWORK_TEST_ANCHO_BANDA

  fi

  if [ -f $FICHERO_HOST_REMOTO_PORT ];
   then

     leerValor hostRemotoIperfTcpPort $FICHERO_HOST_REMOTO_PORT; if [ -n $tmp ]; then hostRemotoIperfTcpPort=$tmp; fi
     leerValor hostRemotoIperfUdpPort $FICHERO_HOST_REMOTO_PORT; if [ -n $tmp ]; then hostRemotoIperfUdpPort=$tmp;  fi
     leerValor hostRemotoIperf3Port $FICHERO_HOST_REMOTO_PORT; if [ -n $tmp ]; then hostRemotoIperf3Port=$tmp; fi

   else

     hostRemotoIperfTcpPort=$HOST_REMOTO_IPERF_TCP_PORT
     hostRemotoIperfUdpPort=$HOST_REMOTO_IPERF_UDP_PORT
     hostRemotoIperf3Port=$HOST_REMOTO_IPERF3_PORT

     echo "hostRemotoIperfTcpPort $hostRemotoIperfTcpPort" > $FICHERO_HOST_REMOTO_PORT
     echo "hostRemotoIperfUdpPort $hostRemotoIperfUdpPort" >> $FICHERO_HOST_REMOTO_PORT
     echo "hostRemotoIperf3Port $hostRemotoIperf3Port" >> $FICHERO_HOST_REMOTO_PORT

  fi

  if [ -f $FICHERO_HOST_LOCAL_PORT ];
   then

     leerValor hostLocalIperfTcpPort $FICHERO_HOST_LOCAL_PORT; if [ -n $tmp ]; then hostLocalIperfTcpPort=$tmp;  fi
     leerValor hostLocalIperfUdpPort $FICHERO_HOST_LOCAL_PORT; if [ -n $tmp ]; then hostLocalIperfUdpPort=$tmp; fi
     leerValor hostLocalIperfListenPort $FICHERO_HOST_LOCAL_PORT; if [ -n $tmp ]; then hostLocalIperfListenPort=$tmp; fi
     leerValor hostLocalIperf3Port $FICHERO_HOST_LOCAL_PORT; if [ -n $tmp ]; then hostLocalIperf3Port=$tmp; fi

   else

     hostLocalIperfTcpPort=$HOST_LOCAL_IPERF_TCP_PORT
     hostLocalIperfUdpPort=$HOST_LOCAL_IPERF_UDP_PORT
     hostLocalIperfListenPort=$HOST_LOCAL_IPERF_LISTEN_PORT
     hostLocalIperf3Port=$HOST_LOCAL_IPERF3_PORT

     echo "hostLocalIperfTcpPort $hostLocalIperfTcpPort" > $FICHERO_HOST_LOCAL_PORT
     echo "hostLocalIperfUdpPort $hostLocalIperfUdpPort" >> $FICHERO_HOST_LOCAL_PORT
     echo "hostLocalIperfListenPort $hostLocalIperfListenPort" >> $FICHERO_HOST_LOCAL_PORT
     echo "hostLocalIperf3Port $hostLocalIperf3Port" >> $FICHERO_HOST_LOCAL_PORT

  fi

  if [ -f $FICHERO_IPERF_REPORTE_TIEMPO ];
   then
 
     leerValor iperfReporteTiempo $FICHERO_IPERF_REPORTE_TIEMPO; if [ -n $tmp ]; then iperfReporteTiempo=$tmp; fi
     leerValor iperfReporteIntervalo $FICHERO_IPERF_REPORTE_TIEMPO; if [ -n $tmp ]; then iperfReporteIntervalo=$tmp; fi
 
 else
 
     iperfReporteTiempo=$IPERF_REPORTE_TIEMPO
     iperfReporteIntervalo=$IPERF_REPORTE_INTERVALO
  
     echo "iperfReporteTiempo $iperfReporteTiempo" > $FICHERO_IPERF_REPORTE_TIEMPO
     echo "iperfReporteIntervalo $iperfReporteIntervalo" >> $FICHERO_IPERF_REPORTE_TIEMPO

  fi

}

### ------------------------------------------------------------------------------------------------------

### Leer parametros de red (IP/Mascara/Gateway) 
function leerConfigurarHost()
{

    actualizarParametros
    leerValorIp "$MSG_IP_SHORT" "$MSG_IP" 0 0 $hostLocalIp
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostLocalIp=$valor
    leerValorIp "$MSG_MASK_SHORT" "$MSG_MASK" 0 0 $hostLocalMascara
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostLocalMascara=$valor
    leerValorIp "$MSG_GATEWAY_SHORT" "$MSG_GATEWAY" 0 0 $hostLocalGateway
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostLocalGateway=$valor

    ### Detectar el usuario conectado
    usuario=`whoami`

    if [ "$usuario" == "root" ]; then
	    leerConfigurarHostDns
    fi

    >$FICHERO_TEMPORAL

    echo                                                                               > $FICHERO_TEMPORAL
    echo "$MSG_HOST_NETWORK_CONFIG_01"                                                >> $FICHERO_TEMPORAL
    echo                                                                              >> $FICHERO_TEMPORAL
    echo "$MSG_HOST_NETWORK_CONFIG_02 $hostLocalIp"                                   >> $FICHERO_TEMPORAL
    echo "$MSG_HOST_NETWORK_CONFIG_03 $hostLocalMascara"                              >> $FICHERO_TEMPORAL
    echo "$MSG_HOST_NETWORK_CONFIG_04 $hostLocalGateway"                              >> $FICHERO_TEMPORAL

    if [ "$usuario" == "root" ]; then
       echo "$MSG_HOST_NETWORK_CONFIG_05 $hostLocalDns"                               >> $FICHERO_TEMPORAL
    fi
 
    dialog --textbox $FICHERO_TEMPORAL 0 0

    ### Configurar entorno de red
   `sudo ifconfig $NETWORK_HW up > /dev/null 2>&1`
   `sudo ifconfig $NETWORK_HW $hostLocalIp netmask $hostLocalMascara > /dev/null 2>&1`
   `sudo route add default gw $hostLocalGateway > /dev/null 2>&1`

    ### Grabar los parametros en un fichero local
    echo "hostLocalIp $hostLocalIp"                                            > $FICHERO_HOST_LOCAL
    echo "hostLocalMascara $hostLocalMascara"                                 >> $FICHERO_HOST_LOCAL
    echo "hostLocalGateway $hostLocalGateway"                                 >> $FICHERO_HOST_LOCAL

}

### Leer parametros de red (Dns) 
function leerConfigurarHostDns()
{

    leerValorIp "$MSG_DNS_SHORT" "$MSG_DNS" 0 60 "$hostLocalDns" "s"
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostLocalDns=$valor

    ### Configurar DNS 
   `sudo echo nameserver $hostLocalDns > /etc/resolv.conf`
   
    ### Grabar los parametros en un fichero local
    echo "hostLocalDns $hostLocalDns"                                         > $FICHERO_HOST_LOCAL_DNS

}

### Leer puertos locales iperf
function leerConfigurarPuertosLocales()
{

    leerValorNumero "$MSG_IPERF_TCP_PORT_LOCAL_SHORT" "$MSG_IPERF_TCP_PORT_LOCAL" 0 0 $hostLocalIperfTcpPort
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostLocalIperfTcpPort=$valor
    leerValorNumero "$MSG_IPERF_UDP_PORT_LOCAL_SHORT" "$MSG_IPERF_UDP_PORT_LOCAL" 0 0 $hostLocalIperfUdpPort
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostLocalIperfUdpPort=$valor
    leerValorNumero "$MSG_IPERF_LISTEN_PORT_LOCAL_SHORT" "$MSG_IPERF_LISTEN_PORT_LOCAL" 0 0 $hostLocalIperfListenPort
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostLocalIperfListenPort=$valor
    leerValorNumero "$MSG_IPERF3_PORT_LOCAL_SHORT" "$MSG_IPERF3_PORT_LOCAL" 0 0 $hostLocalIperf3Port
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostLocalIperf3Port=$valor

    echo "hostLocalIperfTcpPort $hostLocalIperfTcpPort" >> $FICHERO_HOST_LOCAL_PORT
    echo "hostLocalIperfUdpPort $hostLocalIperfUdpPort" >> $FICHERO_HOST_LOCAL_PORT
    echo "hostLocalIperfListenPort $hostLocalIperfListenPort" >> $FICHERO_HOST_LOCAL_PORT
    echo "hostLocalIperf3Port $hostLocalIperf3Port" >> $FICHERO_HOST_LOCAL_PORT

    reiniciarServidoresIperf

}

### Leer puertos remotos iperf
function leerConfigurarPuertosRemotos()
{

    leerValorNumero "$MSG_IPERF_TCP_PORT_REMOTO_SHORT" "$MSG_IPERF_TCP_PORT_REMOTO" 0 0 $hostRemotoIperfTcpPort
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostRemotoIperfTcpPort=$valor
    leerValorNumero "$MSG_IPERF_UDP_PORT_REMOTO_SHORT" "$MSG_IPERF_UDP_PORT_REMOTO" 0 0 $hostRemotoIperfUdpPort
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostRemotoIperfUdpPort=$valor
    leerValorNumero "$MSG_IPERF3_PORT_REMOTO_SHORT" "$MSG_IPERF3_PORT_REMOTO" 0 0 $hostRemotoIperf3Port
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    hostRemotoIperf3Port=$valor

    echo "hostRemotoIperfTcpPort $hostRemotoIperfTcpPort" >> $FICHERO_HOST_REMOTO_PORT
    echo "hostRemotoIperfUdpPort $hostRemotoIperfUdpPort" >> $FICHERO_HOST_REMOTO_PORT
    echo "hostRemotoIperf3Port $hostRemotoIperf3Port" >> $FICHERO_HOST_REMOTO_PORT

}

### Leer parametros de tiempo e intervalo de notficacion
function leerConfigurarTiempoIntervalo()
{

    leerValorNumero "$MSG_TEST_DURATION_SHORT" "$MSG_TEST_DURATION" 0 0 $iperfReporteTiempo
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    iperfReporteTiempo=$valor
    leerValorNumero "$MSG_TEST_INTERVAL_SHORT" "$MSG_TEST_INTERVAL" 0 0 $iperfReporteIntervalo
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    iperfReporteIntervalo=$valor

    ### Grabar los parametros del servidor remoto
    echo "iperfReporteTiempo $iperfReporteTiempo" > $FICHERO_IPERF_REPORTE_TIEMPO
    echo "iperfReporteIntervalo $iperfReporteIntervalo" >> $FICHERO_IPERF_REPORTE_TIEMPO

}

### Cambiar passwords 
function leerConfigurarPassword()
{

    leerValorPassword "$MSG_PASSWORD"
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    newPasswd=$valor

    leerValorPassword "$MSG_PASSWORD_REPEAT"
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    checkNewPasswd=$valor

    if [ "$newPasswd" != "$checkNewPasswd" ]; then
       mensajeDatoErroneo "$MSG_PASSWORD_INCORRECT"
       leerConfigurarPassword
    fi

    ### Cambiar password de los usuarios iperf y root
    `echo "iperf:$valor" | sudo chpasswd`
    `echo "root:$valor" | sudo chpasswd`
    
}

### Ver estado de los servidores 
function verServidoresIperf()
{

    ps -ax | grep iperf | grep -v tty | dialog --programbox "$DIALOG_IPERF_RUNNING" 20 100

}

### Reiniciar servidores 
function pararServidoresIperf()
{

    `sudo killall -9 $IPERF_COMANDO > /dev/null 2>&1`
    sleep 0.1
    `sudo killall -9 $IPERF3_COMANDO > /dev/null 2>&1`
    sleep 0.1

}

### Reiniciar servidores 
function arrancarServidoresIperf()
{

   `$IPERF_COMANDO -s -D -p $hostLocalIperfTcpPort > /dev/null 2>&1`
    sleep 0.1
   `$IPERF_COMANDO -s -D -u -p $hostLocalIperfUdpPort > /dev/null 2>&1`
    sleep 0.1
   `$IPERF3_COMANDO -s -D -p $hostLocalIperf3Port > /dev/null 2>&1`
    sleep 0.1

}

### Reiniciar servidores 
function reiniciarServidoresIperf()
{

   pararServidoresIperf
   arrancarServidoresIperf

}

### TESTS ------------------------------------------------------------------------------------

### Test TCP con servidor remoto
function testIperfRemotoAuto()
{  

    actualizarParametros   

    leerValorTexto "$MSG_TEST_NAME_SHORT" "$MSG_TEST_NAME" 8 60 $networkTestName
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    networkTestName=`echo "$valor" | tr ' ' _ `
    leerValorIp "$MSG_IP_REMOTE_SHORT" "$MSG_IP_REMOTE" 0 0 $networkTestIp
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    networkTestIp=$valor
    leerValorAnchoBanda "$MSG_BANDWIDTH_SHORT" "$MSG_BANDWIDTH" 8 78 $networkTestAnchoBanda
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    networkTestAnchoBanda=$valor

    ### Grabar los parametros del servidor remoto
    echo "networkTestIp $networkTestIp" > $FICHERO_NETWORK_TEST
    echo "networkTestName $networkTestName" >> $FICHERO_NETWORK_TEST

    echo "networkTestAnchoBanda $networkTestAnchoBanda" > $FICHERO_NETWORK_TEST_ANCHO_BANDA

    ### La prueba automatica solamente se realiza con comandos iperf3

    ### El primer iperf es el que debe crear la cabecera del log
    anadirUltimoLog="$VALUE_NO"

    if [ "$iperfVersionActiva" == "3" ]; then

        ### Test TCP subida (1)
        comandoIperf3="$IPERF3_COMANDO -c $networkTestIp -p $hostRemotoIperf3Port -t $iperfReporteTiempo -i $iperfReporteIntervalo "
        crearResultadoLog
        anadirUltimoLog=$VALUE_YES
    
        ### Test TCP bajada (2)
        comandoIperf3="$IPERF3_COMANDO -c $networkTestIp -p $hostRemotoIperf3Port -t $iperfReporteTiempo -i $iperfReporteIntervalo  -R "
        crearResultadoLog

        ### Test UDP subida (3)

        comandoIperf3="$IPERF3_COMANDO -c $networkTestIp -p $hostRemotoIperf3Port -t $iperfReporteTiempo -i $iperfReporteIntervalo  -b $networkTestAnchoBanda -u "
        crearResultadoLog

        ### Test UDP bajada (4)
        comandoIperf3="$IPERF3_COMANDO -c $networkTestIp -p $hostRemotoIperf3Port -t $iperfReporteTiempo -i $iperfReporteIntervalo  -b $networkTestAnchoBanda -u -R "
        crearResultadoLog

      else

        ### Test TCP subida y bajada 
        comandoIperf="$IPERF_COMANDO -c $networkTestIp -p $hostRemotoIperfTcpPort -t $iperfReporteTiempo -i $iperfReporteIntervalo -r -L $hostLocalIperfListenPort "
        crearResultadoLog
        anadirUltimoLog=$VALUE_YES

        ### Test UDP subida y bajada 
        comandoIperf="$IPERF_COMANDO -c $networkTestIp -p $hostRemotoIperfUdpPort -t $iperfReporteTiempo -i $iperfReporteIntervalo  -b $networkTestAnchoBanda -u -r -L $hostLocalIperfListenPort "
        crearResultadoLog

    fi

    comandoIperf=""
    comandoIperf3=""

}

### Test TCP con servidor remoto
function testIperfRemotoTcp()
{  

    actualizarParametros   

    if [ -z "$networkTestName" ]; then

       leerValorTexto "$MSG_TEST_NAME_SHORT" "$MSG_TEST_NAME" 8 60 $networkTestName
       if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
       networkTestName=`echo "$valor" | tr ' ' _ `
       anadirUltimoLog="$VALUE_NO"
     else
       leerValorSiNo "$MSG_LOG_ADD_SHORT" "$MSG_LOG_ADD" 6 50
       if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
       anadirUltimoLog=$valor
       if [ "$anadirUltimoLog" == "$VALUE_NO" ]; then
          leerValorTexto "$MSG_TEST_NAME_SHORT" "$MSG_TEST_NAME" 8 60 $networkTestName
          if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
          networkTestName=`echo "$valor" | tr ' ' _ `
       fi

    fi

    leerValorIp "$MSG_IP_REMOTE_SHORT" "$MSG_IP_REMOTE_SHORT" 0 0 $networkTestIp
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    networkTestIp=$valor
    
    leerVersionIperf
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi

    ### Grabar los parametros del servidor remoto
    echo "networkTestIp $networkTestIp" > $FICHERO_NETWORK_TEST
    echo "networkTestName $networkTestName" >> $FICHERO_NETWORK_TEST

    if [ "$iperfVersionActiva" == "3" ]; then

        comandoIperf3="$IPERF3_COMANDO -c $networkTestIp -p $hostRemotoIperf3Port -t $iperfReporteTiempo -i $iperfReporteIntervalo "
        crearResultadoLog

        comandoIperf3="$IPERF3_COMANDO -c $networkTestIp -p $hostRemotoIperf3Port -t $iperfReporteTiempo -i $iperfReporteIntervalo -R "
        anadirUltimoLog=$VALUE_YES
        crearResultadoLog

      else

        comandoIperf="$IPERF_COMANDO -c $networkTestIp -p $hostRemotoIperfTcpPort -t $iperfReporteTiempo -i $iperfReporteIntervalo -r -L $hostLocalIperfListenPort "
        crearResultadoLog
    
    fi

    comandoIperf=""
    comandoIperf3=""

}

### Test UDP con servidor remoto
function testIperfRemotoUdp()
{

    actualizarParametros

    if [ -z "$networkTestName" ]; then

       leerValorTexto "$MSG_TEST_NAME_SHORT" "$MSG_TEST_NAME_SHORT" 8 60 $networkTestName
       if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
       networkTestName=`echo "$valor" | tr ' ' _ `
       anadirUltimoLog="$VALUE_NO"
     else
       leerValorSiNo "$MSG_LOG_ADD_SHORT" "$MSG_LOG_ADD" 6 50
       if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
       anadirUltimoLog=$valor
       if [ "$anadirUltimoLog" == "$VALUE_NO" ]; then
          leerValorTexto "$MSG_TEST_NAME_SHORT" "$MSG_TEST_NAME" 8 60 $networkTestName
          if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
          networkTestName=`echo "$valor" | tr ' ' _ `
       fi

    fi

    leerValorIp "$MSG_IP_REMOTE_SHORT" "$MSG_IP_REMOTE" 0 0 $networkTestIp
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    networkTestIp=$valor
    leerValorAnchoBanda "$MSG_BANDWIDTH_SHORT" "$MSG_BANDWIDTH" 8 78 $networkTestAnchoBanda
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    networkTestAnchoBanda=$valor

    leerVersionIperf
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi

    ### Grabar los parametros del servidor remoto
    echo "networkTestIp $networkTestIp" > $FICHERO_NETWORK_TEST
    echo "networkTestName $networkTestName" >> $FICHERO_NETWORK_TEST

    echo "networkTestAnchoBanda $networkTestAnchoBanda" > $FICHERO_NETWORK_TEST_ANCHO_BANDA

    if [ "$iperfVersionActiva" == "3" ]; then

        comandoIperf3="$IPERF3_COMANDO -c $networkTestIp -p $hostRemotoIperf3Port -t $iperfReporteTiempo -i $iperfReporteIntervalo  -b $networkTestAnchoBanda -u "
        crearResultadoLog

        comandoIperf3="$IPERF3_COMANDO -c $networkTestIp -p $hostRemotoIperf3Port -t $iperfReporteTiempo -i $iperfReporteIntervalo -b $networkTestAnchoBanda -R -u"
        anadirUltimoLog=$VALUE_YES
        crearResultadoLog

       else

        comandoIperf="$IPERF_COMANDO -c $networkTestIp -p $hostRemotoIperfUdpPort -t $iperfReporteTiempo -i $iperfReporteIntervalo  -b $networkTestAnchoBanda -u -r -L $hostLocalIperfListenPort "
        crearResultadoLog

    fi

    comandoIperf=""
    comandoIperf3=""

}

### Extraer ip de comando iperf
### $1 Comando iperf
### $2 parametro 
### Return $ip
function extraerParametroDeComandoIperf()
{

    ### No usar IFS que provoca comportamientos extraños

    parametro1="$1" 

    array=(${parametro1})

    for i in "${!array[@]}"
    do

      if [ "${array[i]}" == "$2" ]; then
         parametroEncontrado="${array[i+1]}"
      fi

    done

}


### Test comando iperf
function testComandoIperf()
{

    actualizarParametros
 
    leerValorTexto "$MSG_IPERF_EXPERT_SHORT" "$MSG_IPERF_EXPERT" 0 100
    if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
    comandoTecleado="$valor"   

    ### Extraer la direccion de equipo para realizar el test iperf
    extraerParametroDeComandoIperf "$comandoTecleado" "-c"
    if validarIp $parametroEncontrado; then 
       networkTestIp=$parametroEncontrado
     else 
       mensajeDatoErroneo "$MSG_IP_ERROR"
       return 
    fi

    extraerParametroDeComandoIperf "$comandoTecleado" "-t"
    if validarNumero $parametroEncontrado; then 
       iperfReporteTiempo=$parametroEncontrado
     else 
      mensajeDatoErroneo "$MSG_ERROR_TIME"
      return 
    fi

    ### Solamente se permiten comandos iperf
    if [[ $comandoTecleado != iperf* ]]; then
       mensajeDatoErroneo
       return
    fi

    if [[ $comandoTecleado != iperf3* ]]; then
       comandoIperf="$comandoTecleado"
       comandoIperf3=""
       iperfVersionActiva="2"
     else 
       comandoIperf=""
       comandoIperf3="$comandoTecleado"
       iperfVersionActiva="3"
    fi

    if [ -z "$networkTestName" ]; then

       leerValorTexto "$MSG_TEST_NAME_SHORT" "$MSG_TEST_NAME" 8 60 $networkTestName
       if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
       networkTestName=`echo "$valor" | tr ' ' _ `
       anadirUltimoLog="$VALUE_NO"
     else
       leerValorSiNo "$MSG_LOG_ADD_SHORT" "$MSG_LOG_ADD" 6 50
       if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
       anadirUltimoLog=$valor
       if [ "$anadirUltimoLog" == "$VALUE_NO" ]; then
          leerValorTexto "$MSG_TEST_NAME_SHORT" "$MSG_TEST_NAME" 8 60 $networkTestName
          if [ "$valor" == "$BOTON_CANCELAR" ]; then return; fi
          networkTestName=`echo "$valor" | tr ' ' _ `
       fi

    fi

    ### Grabar los parametros del servidor remoto
    echo "networkTestIp $networkTestIp" > $FICHERO_NETWORK_TEST
    echo "networkTestName $networkTestName" >> $FICHERO_NETWORK_TEST

    crearResultadoLog

}

function ejecutarComando()
{

    ### El comando iperf3 no muestra los resultados si pasa mediante tee o es enviado a dialog 
    ### no funciona ni utilizando --logfile
    $comando 2>&1 | tee -a $ficheroLog | tee $FICHERO_COMANDO_SALIDA | dialog --progressbox "$comando" 20 100

}

### Ejecutar comando visualizando el tiempo pendiente para finalizar
### $1 Tiempo total de ejecucion del comando
function ejecutarComandoConGauge()
{

    dialog --title "$PROGRAMA $VERSION" --gauge "" 10 80 < <(

    tiempoTotalEjecucion=$1; 

    >$FICHERO_COMANDO_SALIDA
    $comando 2>&1 | tee -a $ficheroLog &

    for (( segundosTranscurridos=1; $segundosTranscurridos<=$tiempoTotalEjecucion; segundosTranscurridos++ ))
    do
      sleep 1;

      progreso=$(( 100*$segundosTranscurridos/$tiempoTotalEjecucion ))
cat <<EOF
XXX
$progreso
$MSG_RUNNING $comando
`echo`
$MSG_TIME_TO_END `expr $tiempoTotalEjecucion - $segundosTranscurridos` $MSG_SECONDS 
`echo`
XXX
EOF
   done
)

}


### Logs -------------------------------------------------------------------------------------

###
### $1 Tiempo total de ejecucion del comando
function logComando()
{

     numeroTest=$((numeroTest+1))

     echo "$LOG_LINE_EQUAL"                                                      >> $ficheroLog     
     echo "$LOG_B_TESTS_COMMAND_01$numeroTest $LOG_B_TESTS_COMMAND_02$comando"   >> $ficheroLog
     echo "$LOG_LINE_EQUAL"                                                      >> $ficheroLog     
     echo "                                                                   "  >> $ficheroLog

     if [ -z "$1" ]; then
        clear; ejecutarComando;
      else
        clear; ejecutarComandoConGauge $1;
      fi

     echo "                                                                   "  >> $ficheroLog
     echo "                                                                   "  >> $ficheroLog

}

### 
function logCabecera()
{
     # Crear el fichero vacio
     ficheroLog=$RUTA_RESULTADOS"/"$(date +"%Y%m%d_%H%M%S_")$networkTestName".log"


     >$ficheroLog     

     echo "$LOG_LINE_HASHTAG"                                                    >> $ficheroLog     
     echo "                                                                   "  >> $ficheroLog
     echo "$LOG_LINE_HYPHEN_MINUS"                                               >> $ficheroLog     
     echo "$LOG_PROGRAM_VERSION"                                                 >> $ficheroLog
     echo "$LOG_LINE_HYPHEN_MINUS"                                               >> $ficheroLog     
     echo "                                                                   "  >> $ficheroLog
     echo "$LOG_DATE $(date)"                                                    >> $ficheroLog
     echo "$LOG_SYSTEM $(uname -a)"                                              >> $ficheroLog
     echo "$LOG_IDENTIFIER $networkTestName"                                     >> $ficheroLog
     echo "$LOG_IPERF3_VERSION"                                                  >> $ficheroLog
     echo "$LOG_IPERF_VERSION"                                                   >> $ficheroLog
     echo "                                                                   "  >> $ficheroLog
     echo "                                                                   "  >> $ficheroLog
     echo "$LOG_LINE_HASHTAG"                                                    >> $ficheroLog     
     echo "                                                                   "  >> $ficheroLog
     echo "$LOG_A_HARDWARE"                                                      >> $ficheroLog
     echo "                                                                   "  >> $ficheroLog
     echo "$LOG_A1_HARDWARE"                                                     >> $ficheroLog
     echo "                                                                   "  >> $ficheroLog
     echo "$(sudo lshw -class network)                                        "  >> $ficheroLog
     echo "                                                                   "  >> $ficheroLog
     echo "                                                                   "  >> $ficheroLog
     echo "$LOG_LINE_HASHTAG"                                                    >> $ficheroLog     
     echo "                                                                   "  >> $ficheroLog
     echo "                                                                   "  >> $ficheroLog
     echo "$LOG_B_TEST"                                                          >> $ficheroLog
     echo "                                                                   "  >> $ficheroLog

     numeroTest=0

     comando="$PING_COMANDO $networkTestIp -c $PING_CONTADOR"
     logComando  

     comando="$TRACEROUTE_COMANDO $networkTestIp"
     logComando  

}

function crearResultadoLog()
{

     if [ "$anadirUltimoLog" == "n" ]; then
        logCabecera
     fi

     if [ "$iperfVersionActiva" == "3" ]; then
        comando="$comandoIperf3"
        logComando $iperfReporteTiempo 
       else
        comando="$comandoIperf"
        logComando 
     fi

}

### Visor ------------------------------------------------------------------------------------

### Ver resultados de los tests
function verResultados()
{

    let i=0 
    arrayTrabajo=() 
    while read -r line; do # leer fichero a fichero
       let i=$i+1
       arrayTrabajo+=($i "$line")
    done < <( find $RUTA_RESULTADOS -maxdepth 1 -type f -printf "%f\n" | sort)
    posicionFichero=$(dialog --title "$DIALOG_TEST_RESULT" --menu "$DIALOG_CHOOSE_FILE" 24 80 17 "${arrayTrabajo[@]}" 3>&2 2>&1 1>&3)

    ficheroParaVisualizar=$(find $RUTA_RESULTADOS -maxdepth 1 -type f -printf "%f\n" | sort | sed -n "`echo "$posicionFichero p" | sed 's/ //'`")
 
    if [ "$posicionFichero" != "1" ]; then
        dialog --stdout --textbox $RUTA_RESULTADOS"/"$ficheroParaVisualizar 0 0;
        verResultados;
    fi

}

### Utilidades -------------------------------------------------------------------------------

### Copiar resultados en pendrive
function copiarResultadosEnPendrive()
{

	dialog --stdout --msgbox "$DIALOG_PENDRIVE_CONNECT" 7 55; 

    contador=1
    array=()
    radioList="" 

    for i in $(sudo fdisk -l | grep Disk | grep sd | awk '{print $2,$3,$4}' | sed 's/://' | sed 's/B,/B/g' | sed 's/ /_/g'); do
        radioList="$radioList $contador $i off "
        array[$contador]=$i
        let contador=contador+1
    done

    cadenaUnidadPendrive=$(dialog --stdout --backtitle "$PROGRAMA $VERSION" --title "$DIALOG_PENDRIVE_UNITS" --radiolist "$DIALOG_PENDRIVE_UNITS" 0 0 $contador $radioList);

    # Extraer de la cadena la unidad del pendrive posicion 5 mas 3 caracteres
    unidadPendrive=${array[$cadenaUnidadPendrive]:5:3}

    if [ ${#unidadPendrive} -gt 1 ]; then
       
       primeraUnidadPendrive=/dev/$unidadPendrive"1"

       `sudo umount $primeraUnidadPendrive`
       `sudo mount $primeraUnidadPendrive /mnt/usb`

       directorioCopiaPendrive="/mnt/usb/"$(date +"%Y%m%d_%H%M%S_")"$PROGRAMA/"
       `sudo mkdir $directorioCopiaPendrive`

       origen=$RUTA_RESULTADOS"/*.log"
       destino=$directorioCopiaPendrive"."

       `sudo cp $origen $destino` 

       dialog --stdout --backtitle "$PROGRAMA $VERSION" --msgbox "$DIALOG_PENDRIVE_DISCONNECT" 6 50;  
       sleep 4

       `sudo umount $primeraUnidadPendrive`

    fi    


} 

### Notificaciones ---------------------------------------------------------------------------

### Mensaje proxy 
function mensajeProxy()
{

     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "$MSG_PROXY_01"                                                                        >> $FICHERO_TEMPORAL
     echo "$MSG_PROXY_02"                                                                        >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "$MSG_PROXY_03"                                                                        >> $FICHERO_TEMPORAL
     echo "$MSG_PROXY_04"                                                                        >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL

}

### Mensaje disclaimer 
function mensajeDisclaimer()
{

     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "$MSG_DISCLAIMER_01"                                                                   >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "$MSG_DISCLAIMER_02"                                                                   >> $FICHERO_TEMPORAL
     echo "$MSG_DISCLAIMER_03"                                                                   >> $FICHERO_TEMPORAL
     echo "$MSG_DISCLAIMER_04"                                                                   >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL

}

### Mensaje inicial iperf
function mensajeInicialIperf()
{

     # Crear el fichero vacio
     >$FICHERO_TEMPORAL

     echo "                                                                                    "  > $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_IPERF_01"                                                                >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_IPERF_02"                                                                >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_IPERF_03"                                                                >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_IPERF_04"                                                                >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_IPERF_05"                                                                >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_IPERF_06"                                                                >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL

     mensajeDisclaimer

     dialog --stdout --backtitle "$PROGRAMA $VERSION" --textbox $FICHERO_TEMPORAL 0 0

}

### Mensaje inicial root
function mensajeInicialRoot()
{

     # Crear el fichero vacio
     >$FICHERO_TEMPORAL

     echo "                                                                                    "  > $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_ROOT_01"                                                                 >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_ROOT_02"                                                                 >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_ROOT_03"                                                                 >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_ROOT_04"                                                                 >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_ROOT_05"                                                                 >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL
     echo "$MSG_WELCOME_ROOT_06"                                                                 >> $FICHERO_TEMPORAL
     echo "                                                                                    " >> $FICHERO_TEMPORAL

     mensajeDisclaimer

     dialog --stdout --backtitle "$PROGRAMA $VERSION" --textbox $FICHERO_TEMPORAL 0 0 

}

### Mensaje inicial root
function mensajeFinalRoot()
{

     # Crear el fichero vacio
     >$FICHERO_TEMPORAL

     mensajeProxy

     dialog --stdout --backtitle "$PROGRAMA $VERSION" --textbox $FICHERO_TEMPORAL 0 0

}

